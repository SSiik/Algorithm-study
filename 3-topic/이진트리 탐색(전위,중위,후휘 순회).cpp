#include <iostream>
using namespace std;

/*
 이진트리 탐색(전위,중위,후휘 순회)
*/

int main() {
	/*
                   1
         2                 3
4             5   6                 7      의 트리 구조라고 생각합시다.




    처음에 시작점을 잡고 갈림길을 간다고 생각합시다.

1) 전위순회
    cout<<v<<" ";		// 자기가 할일
    D(v*2); 		//왼쪽 노드
    D(v*2+1);		 //오른쪽 노드
   
   전위순회라고 생각을해봅시다 여기서는 cout문이 자기의 할일입니다.
   자기 할일을 한후에 -> v*2 번호이므로 왼쪽으로 갑니다 아마 왼쪽으로 쭉가다가 return 조건을 만나겠죠.
   자 이러면 돌아올때를 잘 생각해야합니다. 항상 "재귀는 돌아오는걸 잘생각"해야 합니다.
  
   여기서는 "D(v*2)이후가 실행"될겁니다.
   4입장에서는 8로 갓다가 return 될거고, 9로 가도 return 될거다. 이게 끝나면, 그니까 뒤를 다하면
   이전의 D(v*2)로 돌아갈거다. 그러면 2로 가는거고, 2에서 5로 갈거다. 5입장에서도 10으로가고 return먹고 11로가서 return먹고
   2로 돌아오고, 2에서 D(v*2+1)끝났으니 1로 돌아가겠죠. 1의 D(v*2+1)이 실행되겠죠.
   3에서 6가고 return먹고 3의 D(v*2)로 돌아가겠죠. 어디로 돌아갈거냐가 체크사항입니다.
   
2) 중위순회
    D(v*2); 		//왼쪽 노드
    cout<<v<<" ";		// 자기가 할일
    D(v*2+1);		 //오른쪽 노드
  일단 왼쪽으로 쭉파고 봅니다. 8로 갓다가 return 먹으면, 이제 4에서 cout 할일을 진행하고 우측노드진입.
  돌아오면 이제 할일을 합니다. 일단 파고 보고 왼쪽 날개가 돌아오면 내 할일을 하고 우측날개를 진행.

3) 후위순회
    D(v*2); 		//왼쪽 노드
    D(v*2+1);		 //오른쪽 노드
    cout<<v<<" ";		// 자기가 할일
  	
    일단왼쪽으로 쭉파고 들어가서 return으로 돌아온다면 오른쪽으로 들어갑니다. 
    내 양쪽 날개가 모두 돌아오면 작업을 합니다.
    4->5->2->6->7->3->1 로 진행될겁니다.

   "날개진행을 어떻게 할거냐로 진행"이됩니다. 사실 아직까지도 머리로 완전히  그려지는 느낌은 아니지만.


	*/
}


